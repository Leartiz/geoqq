package com.qubacy.geoqq.data.image.repository

import android.graphics.Bitmap
import android.net.Uri
import com.qubacy.geoqq.common.util.mock.AnyUtility
import com.qubacy.geoqq.common.util.mock.Base64MockContext
import com.qubacy.geoqq.common.util.mock.BitmapMockContext
import com.qubacy.geoqq.data.common.repository.common.result.error.ErrorResult
import com.qubacy.geoqq.data.common.repository.network.NetworkTestContext
import com.qubacy.geoqq.data.image.repository.result.GetImagesResult
import com.qubacy.geoqq.data.image.repository.source.local.LocalImageDataSource
import com.qubacy.geoqq.data.image.repository.source.network.NetworkImageDataSource
import kotlinx.coroutines.runBlocking
import org.junit.Assert
import org.junit.Before
import org.junit.Test
import org.mockito.Mockito
import org.mockito.Mockito.mock

class ImageDataRepositoryTest(

) {
    companion object {
        const val DEFAULT_IMAGE_CONTENT = ""

        init {
            Base64MockContext.mockBase64()
            BitmapMockContext.mockBitmapFactory()
        }
    }

    private lateinit var mImageDataRepository: ImageDataRepository

    private fun generateGetImagesNetworkResponse(imagesIds: List<Long>): String {
        val responseStringBuilder = StringBuilder("{\"images\": [")

        for (index in imagesIds.indices) {
            responseStringBuilder.append("{\"id\": ${imagesIds[index]}, \"content\"=\"${DEFAULT_IMAGE_CONTENT}\"}")
            responseStringBuilder.append(if (index == imagesIds.size - 1) "" else ",")
        }

        return responseStringBuilder.append("]}").toString()
    }

    private fun initImageDataRepository(
        code: Int = 200,
        responseString: String = String(),
        loadedImageUri: Uri? = null,
        savedImageUri: Uri? = null
    ) {
        val localImageDataSource = Mockito.mock(LocalImageDataSource::class.java)

        runBlocking {
            Mockito.`when`(localImageDataSource.loadImage(
                Mockito.anyLong()
            )).thenReturn(loadedImageUri)
            Mockito.`when`(localImageDataSource.saveImageOnDevice(
                Mockito.anyLong(),
                AnyUtility.any(Bitmap::class.java)
            )).thenReturn(savedImageUri)
        }

        val networkImageDataSource = NetworkTestContext.generateTestRetrofit(
            NetworkTestContext.generateDefaultTestInterceptor(code, responseString)
        ).create(NetworkImageDataSource::class.java)

        mImageDataRepository = ImageDataRepository(localImageDataSource, networkImageDataSource)
    }

    private fun getMockedUri(): Uri {
        return mock(Uri::class.java)
    }

    @Before
    fun setup() {
        initImageDataRepository()
    }

    @Test
    fun getImageFromLocalStorageTest() {
        val imagesIds = listOf(1L)
        val imageUri = getMockedUri()

        initImageDataRepository(loadedImageUri = imageUri)

        runBlocking {
            val result = mImageDataRepository.getImages(imagesIds, String())

            Assert.assertNotEquals(ErrorResult::class.java, result::class.java)
            Assert.assertEquals(imageUri, (result as GetImagesResult).imageIdToUriMap[imagesIds.first()])
        }
    }

    @Test
    fun getImageFromNetworkTest() {
        val imagesIds = listOf(1L)
        val imageUri = getMockedUri()

        val accessToken = "access_token"
        val responseString = generateGetImagesNetworkResponse(imagesIds)

        initImageDataRepository(responseString = responseString, savedImageUri = imageUri)

        runBlocking {
            val result = mImageDataRepository.getImages(imagesIds, accessToken)

            Assert.assertNotEquals(ErrorResult::class.java, result::class.java)
            Assert.assertEquals(imageUri, (result as GetImagesResult).imageIdToUriMap[imagesIds.first()])
        }
    }
}