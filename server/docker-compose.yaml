name: geoqq_own_services

services:
  postgre_domain: 
    image: postgres:16.3-alpine3.19
    hostname: ${POSTGRE_NAME}
    container_name: ${POSTGRE_NAME}
    restart: "always"
    environment:
      - POSTGRES_DB=${POSTGRE_DB}
      - POSTGRES_USER=${POSTGRE_USER}
      - POSTGRES_PASSWORD=${POSTGRE_PASS}
      - POSTGRES_HOST_AUTH_METHOD=md5
    ports:
      - "${EXTERNAL_POSTGRE_PORT}:${POSTGRE_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRE_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - postgre_net
      - own_net    
    volumes:
      - postgre_domain_data:/var/lib/postgresql/data

  migrate_domain:
    image: migrate/migrate
    hostname: migrate_domain
    container_name: migrate_domain
    restart: "no"
    command: [
      "-path=/migrations/",
      "-database", "postgres://${POSTGRE_USER}:${POSTGRE_PASS}@\
      ${POSTGRE_NAME}:${POSTGRE_PORT}/${POSTGRE_DB}?sslmode=disable",
      "up"
    ]
    volumes:
      - ./own_services/common/storage/domain/sql/postgre/migrations:/migrations
    networks:
      - postgre_net
    depends_on:
      postgre_domain:
        condition: service_healthy

  cache:
    image: redis:alpine3.20
    hostname: ${REDIS_NAME}
    container_name: ${REDIS_NAME}
    restart: "always"
    ulimits:
      memlock: -1
    ports:
      - "${EXTERNAL_REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping 2>&1 | grep PONG > /dev/null"]
      interval: 5s
      timeout: 1s
      retries: 5
    networks:
      - own_net

  # almost external and not external service!?
  promtail:
    image: grafana/promtail
    hostname: ${PROMTAIL_NAME}
    container_name: ${PROMTAIL_NAME}
    restart: "always"
    networks:
      - promtail_net
      - external_net
    volumes:
      - promtail_data:/var/lib/promtail
      - ./external_services/grafana/promtail/config.yaml:/etc/promtail/config.yaml
      - geoqq_rotation:/var/log/geoqq # only for read!
    command:
      - -config.file=/etc/promtail/config.yaml # not necessary!?
    depends_on:
      geoqq_http:
        condition: service_started

  rabbit:
    image: rabbitmq:management
    hostname: ${RABBIT_NAME}
    container_name: ${RABBIT_NAME}
    restart: "always"
    ports:
      - "${EXTERNAL_RABBIT_MANAGMENT_PORT}:${RABBIT_MANAGMENT_PORT}"
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_USERNAME}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_PASSWORD}
    volumes:
      - rabbit_data:/var/lib/rabbitmq
    networks:
      - own_net

  geoqq_http:
    build: 
      context: ./own_services
      dockerfile: Dockerfile_geoqq_http
    hostname: ${GEOQQ_HTTP_NAME}
    container_name: ${GEOQQ_HTTP_NAME}
    restart: "always"
    ports:
      - "${GEOQQ_HTTP_PORT}:${GEOQQ_HTTP_PORT}"
    environment:    
      - GIN_MODE=release
      - GEOQQ_HTTP_CONFIG_FOR_MERGE=release
      - GEOQQ_HTTP_LOGGING_FORMAT=${LOGGING_FORMAT}
      - GEOQQ_HTTP_PORT=${GEOQQ_HTTP_PORT}

      - GEOQQ_HTTP_TOKEN_SIGNING_KEY=${TOKEN_SIGNING_KEY}
      - GEOQQ_HTTP_ACCESS_TOKEN_TTL=${ACCESS_TOKEN_TTL}
      - GEOQQ_HTTP_REFRESH_TOKEN_TTL=${REFRESH_TOKEN_TTL}

      - GEOQQ_HTTP_POSTGRE_HOST=${POSTGRE_NAME}
      - GEOQQ_HTTP_POSTGRE_PORT=${POSTGRE_PORT}
      - GEOQQ_HTTP_POSTGRE_USER=${POSTGRE_USER}
      - GEOQQ_HTTP_POSTGRE_PASS=${POSTGRE_PASS}
      - GEOQQ_HTTP_POSTGRE_DB=${POSTGRE_DB}
      
      - GEOQQ_HTTP_CACHE_ENABLE
      - GEOQQ_HTTP_REDIS_HOST=${REDIS_NAME}
      - GEOQQ_HTTP_REDIS_PORT=${REDIS_PORT}
      - GEOQQ_HTTP_REDIS_USER=${REDIS_USER}
      - GEOQQ_HTTP_REDIS_PASS=${REDIS_PASS}
      - GEOQQ_HTTP_REDIS_DB

      - GEOQQ_HTTP_MSGS_ENABLE
      - GEOQQ_HTTP_RABBIT_MSG_TTL
      - GEOQQ_HTTP_RABBIT_EXCHANGE=${RABBIT_EXCHANGE}
      - GEOQQ_HTTP_RABBIT_HOST=${RABBIT_NAME}
      - GEOQQ_HTTP_RABBIT_PORT=${RABBIT_PORT}
      - GEOQQ_HTTP_RABBIT_USERNAME=${RABBIT_USERNAME}
      - GEOQQ_HTTP_RABBIT_PASSWORD=${RABBIT_PASSWORD}
      
    depends_on:
      postgre_domain:
        condition: service_healthy
      cache:
        condition: service_healthy
      migrate_domain:
        condition: service_completed_successfully
    networks:
      - promtail_net
      - own_net
    volumes:
      - geoqq_rotation:/app/cmd/rotation # or rename to `geoqq`?
      - geoqq_http_avatar:/app/cmd/avatar

  geoqq_ws:
    build: 
      context: ./own_services
      dockerfile: Dockerfile_geoqq_ws
    hostname: ${GEOQQ_WS_NAME}
    container_name: ${GEOQQ_WS_NAME}
    restart: "always"
    ports:
      - "${GEOQQ_WS_PORT}:${GEOQQ_WS_PORT}"
    environment:  
      - GIN_MODE=release
      - GEOQQ_WS_LOGGING_FORMAT=${LOGGING_FORMAT}
      - GEOQQ_WS_PORT=${GEOQQ_WS_PORT}
      - GEOQQ_WS_TOKEN_SIGNING_KEY=${TOKEN_SIGNING_KEY}

      - GEOQQ_WS_POSTGRE_HOST=${POSTGRE_NAME}
      - GEOQQ_WS_POSTGRE_PORT=${POSTGRE_PORT}
      - GEOQQ_WS_POSTGRE_USER=${POSTGRE_USER}
      - GEOQQ_WS_POSTGRE_PASS=${POSTGRE_PASS}
      - GEOQQ_WS_POSTGRE_DB=${POSTGRE_DB}

      - GEOQQ_WS_CACHE_ENABLE
      - GEOQQ_WS_REDIS_HOST=${REDIS_NAME}
      - GEOQQ_WS_REDIS_PORT=${REDIS_PORT}
      - GEOQQ_WS_REDIS_USER=${REDIS_USER}
      - GEOQQ_WS_REDIS_PASS=${REDIS_PASS}
      - GEOQQ_WS_REDIS_DB

      - GEOQQ_WS_RABBIT_HOST=${RABBIT_NAME}
      - GEOQQ_WS_RABBIT_PORT=${RABBIT_PORT}
      - GEOQQ_WS_RABBIT_USERNAME=${RABBIT_USERNAME}
      - GEOQQ_WS_RABBIT_PASSWORD=${RABBIT_PASSWORD}
      - GEOQQ_WS_RABBIT_EXCHANGE=${RABBIT_EXCHANGE}

    depends_on:
      geoqq_http:
        condition: service_started
    networks:
      - promtail_net
      - own_net

volumes:
  postgre_domain_data:
  redis_data:
  geoqq_rotation:
  geoqq_http_avatar:
  promtail_data:
  rabbit_data:

networks:
  postgre_net:
    driver: bridge
  promtail_net:
    driver: bridge
  own_net:
    driver: bridge
  external_net:
    external: true
      