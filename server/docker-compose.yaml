name: geoqq_services

services:
  postgre_domain: 
    image: postgres:16.3-alpine3.19
    hostname: ${POSTGRE_NAME}
    container_name: ${POSTGRE_NAME}
    environment:
      - POSTGRES_DB=${POSTGRE_DB}
      - POSTGRES_USER=${POSTGRE_USER}
      - POSTGRES_PASSWORD=${POSTGRE_PASS}
      - POSTGRES_HOST_AUTH_METHOD=md5
    ports:
      - "${POSTGRE_PORT}:${INTERNAL_POSTGRE_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRE_USER}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - postgre_net
      - all_net    
    volumes:
      - postgre_domain_data:/var/lib/postgresql/data

  migrate_domain:
    image: migrate/migrate
    hostname: migrate_domain
    container_name: migrate_domain
    restart: "no"
    command: [
      "-path=/migrations/",
      "-database", "postgres://${POSTGRE_USER}:${POSTGRE_PASS}@\
      ${POSTGRE_NAME}:${INTERNAL_POSTGRE_PORT}/${POSTGRE_DB}?sslmode=disable",
      "up"
    ]
    volumes:
      - ./own_services/common/storage/domain/sql/postgre/migrations:/migrations
    networks:
      - postgre_net
    depends_on:
      postgre_domain:
        condition: service_healthy

  cache:
    image: chainguard/dragonfly
    hostname: ${DRAGONFLY_NAME}
    container_name: ${DRAGONFLY_NAME}
    restart: "on-failure"
    ulimits:
      memlock: -1
    ports:
      - "${DRAGONFLY_PORT}:${INTERNAL_DRAGONFLY_PORT}"
    volumes:
      - dragonfly_data:/data
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping 2>&1 | grep PONG > /dev/null"]
      interval: 5s
      timeout: 1s
      retries: 5
    networks:
      - all_net

  geoqq_http:
    build: 
      context: ./own_services
      dockerfile: Dockerfile_geoqq_http
    hostname: geoqq_http
    container_name: geoqq_http
    restart: "on-failure"
    ports:
      - "${GEOQQ_HTTP_PORT}:${GEOQQ_HTTP_PORT}"
    environment:
      - GIN_MODE=release
      - GEOQQ_HTTP_CONFIG_FOR_MERGE=release
      - GEOQQ_HTTP_PORT=${GEOQQ_HTTP_PORT}

      - GEOQQ_HTTP_TOKEN_SIGNING_KEY
      - GEOQQ_HTTP_ACCESS_TOKEN_TTL
      - GEOQQ_HTTP_REFRESH_TOKEN_TTL

      - GEOQQ_HTTP_POSTGRE_HOST=${POSTGRE_NAME}
      - GEOQQ_HTTP_POSTGRE_PORT=${INTERNAL_POSTGRE_PORT}
      - GEOQQ_HTTP_POSTGRE_USER=${POSTGRE_USER}
      - GEOQQ_HTTP_POSTGRE_PASS=${POSTGRE_PASS}
      - GEOQQ_HTTP_POSTGRE_DB=${POSTGRE_DB}
      
      - GEOQQ_HTTP_CACHE_ENABLE
      - GEOQQ_HTTP_REDIS_HOST=${DRAGONFLY_NAME}
      - GEOQQ_HTTP_REDIS_PORT=${DRAGONFLY_USER}
      - GEOQQ_HTTP_REDIS_USER=${DRAGONFLY_PASS}
      - GEOQQ_HTTP_REDIS_DB=${DRAGONFLY_DB}
      
    depends_on:
      postgre_domain:
        condition: service_healthy
      cache:
        condition: service_healthy
      migrate_domain:
        condition: service_completed_successfully
    networks:
      - all_net
    volumes:
      - geoqqhttp_rotation:/app/cmd/rotation
      - geoqqhttp_avatar:/app/cmd/avatar

  # geoqq_ws:

volumes:
  postgre_domain_data:
  dragonfly_data:
  geoqqhttp_rotation:
  geoqqhttp_avatar:

networks:
  postgre_net:
    driver: bridge
  all_net:
    driver: bridge
